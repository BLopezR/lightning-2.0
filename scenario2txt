#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''Verbalizador de escenarios

Trasforma un escenario en XML en un texto descriptivo
'''
import sys
from lxml import etree
import argparse

def print_net(elem):
    name = elem.get('name')
    elems = elem.xpath('./container')
    print(f'La red {name} conecta ',end='')
    nexo = ''
    for e in elems:
        iface = e.xpath('./interface')[0].get("name")
        print (f'{nexo} la interfaz {iface} de {e.get("name")}', end='')
        if nexo == '':
            nexo = ' con '
        elif nexo == ' con ':
            nexo = ' y '
    print()

def print_elem(elem,kind='ordenador'):
    name = elem.get('name')
    ifaces = elem.xpath('./interface')
    names = [ iface.get('name') for iface in ifaces ]
    term = 's' if len(ifaces) > 1 else ''
    print (f'El {kind} {name} tiene {len(ifaces)} interface{term}:', end= ' ')
    print(f'{", ".join(names)}')

def main():
    parser = argparse.ArgumentParser(
                    description=__doc__,
                    formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument("scenario",
        type=str,default=None,
        help="El escenario a verbalizar")

    args = parser.parse_args()
    assert args.scenario is not None, "Falta el fichero del escenario"

    parser = etree.XMLParser(ns_clean = True)
    tree = etree.parse(args.scenario, parser)
    routers = tree.getroot().xpath('//scenario/container[@type="router"]')
    hosts = tree.getroot().xpath('//scenario/container[@type="host"]')
    networks = tree.getroot().xpath('//scenario/network')
    # print(routers,hosts,networks)
    hs = 'es' if len(hosts)  != 1 else ''
    rs = 's' if len(routers) != 1 else ''
    print(f'El escenario tiene {len(hosts)} ordenador{hs}, {len(routers)} router{rs} y {len(networks)} redes, que los interconectan')
    for host in hosts:
        print_elem(host,kind='ordenador')
    for router in routers:
        print_elem(router,kind='router')
    for network in networks:
        print_net(network)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print (f'Excepci√≥n detectada {e}')
    finally:
        pass
